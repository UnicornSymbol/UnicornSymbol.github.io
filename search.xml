<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Django book学习笔记(二)——模板]]></title>
      <url>%2F2017%2F03%2F28%2Fdjango%2FDjango_book%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%2F</url>
      <content type="text"><![CDATA[模板系统的基本知识模板是一个文本，用于分离文档的表现形式和内容。 模板定义了占位符以及各种用于规范文档该如何显示的各部分基本逻辑（模板标签）。 模板通常用于产生HTML，但是Django的模板也能产生任何基于文本格式的文档。 如何使用模板系统在Python代码中使用Django模板的最基本方式如下：1).可以用原始的模板代码字符串创建一个 Template 对象， Django同样支持用指定模板文件路径的方式来创建 Template 对象;2).调用模板对象的render方法，并且传入一套变量context。它将返回一个基于模板的展现字符串，模板中的变量和标签会被context值替换。例： 12345678&gt;&gt;&gt; from django import template&gt;&gt;&gt; t = template.Template('My name is &#123;&#123; name &#125;&#125;.')&gt;&gt;&gt; c = template.Context(&#123;'name': 'Adrian'&#125;)&gt;&gt;&gt; print t.render(c)My name is Adrian.&gt;&gt;&gt; c = template.Context(&#123;'name': 'Fred'&#125;)&gt;&gt;&gt; print t.render(c)My name is Fred. 深度变量的查找在 Django 模板中遍历复杂数据结构的关键是句点字符 (.)。比如，假设你要向模板传递一个 Python 字典。 要通过字典键访问该字典的值，可使用一个句点： 123456&gt;&gt;&gt; from django.template import Template, Context&gt;&gt;&gt; person = &#123;'name': 'Sally', 'age': '43'&#125;&gt;&gt;&gt; t = Template('&#123;&#123; person.name &#125;&#125; is &#123;&#123; person.age &#125;&#125; years old.')&gt;&gt;&gt; c = Context(&#123;'person': person&#125;)&gt;&gt;&gt; t.render(c)u'Sally is 43 years old.' 同样，也可以通过句点来访问对象的属性。点语法也可以用来引用对象的方法。最后，句点也可用于访问列表索引。句点查找规则可概括为： 当模板系统在变量名中遇到点时，按照以下顺序尝试进行查找： 字典类型查找 （比如 foo[“bar”] ) 属性查找 (比如 foo.bar ) 方法调用 （比如 foo.bar() ) 列表类型索引查找 (比如 foo[bar] )系统使用所找到的第一个有效类型。 这是一种短路逻辑。==注意==： 调用方法时不需要使用圆括号，而且也无法给该方法传递参数；你只能调用不需参数的方法。 在方法查找过程中，如果某方法抛出一个异常，如果该异常有一个 silent_variable_failure 属性并且值为 True，则模板里的指定变量会被置为空字符串。 如果模板文件里包含了 ，对象又具有 delete()方法，而且delete() 有alters_data=True这个属性，那么在模板载入时， delete()方法将不会被执行。 它将静静地错误退出。基本的模板标签和过滤器1).if/else {% if %} 标签检查(evaluate)一个变量，如果这个变量为真(即，变量存在，非空，不是布尔值假)，系统会显示在 {% if %} 和 {% endif %} 之间的任何内容，例如： 12345&#123;% if today_is_weekend %&#125; &lt;p&gt;Welcome to the weekend!&lt;/p&gt;&#123;% else %&#125; &lt;p&gt;Get back to work.&lt;/p&gt;&#123;% endif %&#125; {% if %} 标签接受 and ， or 或者 not 关键字来对多个变量做判断 ，或者对变量取反（ not )，但是{% if %} 标签不允许在同一个标签中同时使用 and 和 or ，因为逻辑上可能模糊的。而且没有 {% elif %} 标签， 请使用嵌套的{% if %}标签来达成同样的效果。一定要用 {% endif %} 关闭每一个 {% if %} 标签。 2).for {% for %} 允许我们在一个序列上迭代。每一次循环中，模板系统会渲染在 {% for %} 和 {% endfor %} 之间的所有内容。 给标签增加一个reversed使得该列表被反向迭代。 123&#123;% for athlete in athlete_list reversed %&#125;...&#123;% endfor %&#125; for标签支持一个可选的{% empty %}分句，通过它我们可以定义当列表为空时的输出内容。 12345&#123;% for athlete in athlete_list %&#125; &lt;p&gt;&#123;&#123; athlete.name &#125;&#125;&lt;/p&gt;&#123;% empty %&#125; &lt;p&gt;There are no athletes. Only computer programmers.&lt;/p&gt;&#123;% endfor %&#125; 在每个{% for %}循环里有一个称为forloop的模板变量。这个变量有一些提示循环进度信息的属性。 forloop.counter 总是一个表示当前循环的执行次数的整数计数器。 这个计数器是从1开始的，所以在第一次循环时 forloop.counter 将会被设置为1。 123&#123;% for item in todo_list %&#125; &lt;p&gt;&#123;&#123; forloop.counter &#125;&#125;: &#123;&#123; item &#125;&#125;&lt;/p&gt;&#123;% endfor %&#125; forloop.counter0 类似于 forloop.counter ，但是它是从0计数的。 第一次执行循环时这个变量会被设置为0。 forloop.revcounter 是表示循环中剩余项的整型变量。 在循环初次执行时 forloop.revcounter 将被设置为序列中项的总数。 最后一次循环执行中，这个变量将被置1。 forloop.revcounter0 类似于 forloop.revcounter ，但它以0做为结束索引。在第一次执行循环时，该变量会被置为序列的项的个数减1。 forloop.first 是一个布尔值。 在第一次执行循环时该变量为True，在下面的情形中这个变量是很有用的。 12345&#123;% for object in objects %&#125; &#123;% if forloop.first %&#125;&lt;li class=&quot;first&quot;&gt;&#123;% else %&#125;&lt;li&gt;&#123;% endif %&#125; &#123;&#123; object &#125;&#125; &lt;/li&gt;&#123;% endfor %&#125; forloop.last 是一个布尔值；在最后一次执行循环时被置为True。 一个常见的用法是在一系列的链接之间放置管道符(|) 1&#123;% for link in links %&#125;&#123;&#123; link &#125;&#125;&#123;% if not forloop.last %&#125; | &#123;% endif %&#125;&#123;% endfor %&#125; forloop.parentloop 是一个指向当前循环的上一级循环的 forloop 对象的引用（在嵌套循环的情况下）。3).ifequal/ifnotequal {% ifequal %} 标签比较两个值，当他们相同时，显示在 {% ifequal %} 和 {% endifequal %} 之中所有的值。和 {% if %} 类似， {% ifequal %} 支持可选的 {% else%} 标签。 12345&#123;% ifequal section &apos;sitenews&apos; %&#125; &lt;h1&gt;Site News&lt;/h1&gt;&#123;% else %&#125; &lt;h1&gt;No News Here&lt;/h1&gt;&#123;% endifequal %&#125; 只有模板变量，字符串，整数和小数可以作为 {% ifequal %} 标签的参数。 1234&#123;% ifequal variable 1 %&#125;&#123;% ifequal variable 1.23 %&#125;&#123;% ifequal variable &apos;foo&apos; %&#125;&#123;% ifequal variable &quot;foo&quot; %&#125; 其他的一些类型，例如Python的字典类型、列表类型、布尔类型，不能用在 {% ifequal %} 中。下面是些错误的例子： 123&#123;% ifequal variable True %&#125;&#123;% ifequal variable [1, 2, 3] %&#125;&#123;% ifequal variable &#123;&apos;key&apos;: &apos;value&apos;&#125; %&#125; 注释Django模板语言同样提供代码注释。 注释使用 ，但这种语法的注释不能跨越多行：1&#123;# This is a comment #&#125; 如果要实现多行注释，可以使用{% comment %}模板标签，就像这样： 1234&#123;% comment %&#125;This is amulti-line comment.&#123;% endcomment %&#125; 过滤器模板过滤器是在变量被显示前修改它的值的一个简单方法。 过滤器使用管道字符，如下所示：1&#123;&#123; name|lower &#125;&#125; 有些过滤器有参数。 过滤器的参数跟随冒号之后并且总是以双引号包含。 例如：1&#123;&#123; bio|truncatewords:&quot;30&quot; &#125;&#125; 以下几个是最为重要的过滤器的一小部分。 addslashes : 添加反斜杠到任何反斜杠、单引号或者双引号前面。 date : 按指定的格式字符串参数格式化 date 或者 datetime 对象。 length : 返回变量的长度。 对于列表，这个参数将返回列表元素的个数。 对于字符串，这个参数将返回字符串中字符的个数。 你可以对列表或者字符串，或者任何知道怎么测定长度的Python 对象使用这个方法（也就是说，有 len() 方法的对象）。在视图中使用模板1).模板加载打开settings.py配置文件，找到TEMPLATE_DIRS添加一个目录用于存放模板文件，例如：123TEMPLATE_DIRS = ( &apos;/home/django/mysite/templates&apos;,) 完成 TEMPLATE_DIRS 设置后，下一步就是修改视图代码，让它使用 Django 模板加载功能而不是对模板路径硬编码。例：12345678910from django.template.loader import get_templatefrom django.template import Contextfrom django.http import HttpResponseimport datetimedef current_datetime(request): now = datetime.datetime.now() t = get_template('current_datetime.html') html = t.render(Context(&#123;'current_date': now&#125;)) return HttpResponse(html) get_template()方法会自动为你连接已经设置的TEMPLATE_DIRS目录和你传入该法的模板名称参数，在文件系统中找出模块的位置，打开文件并返回一个编译好的 Template 对象。2).render_to_response()Django提供了一个捷径，让你一次性地载入某个模板文件，渲染它，然后将此作为HttpResponse返回。该捷径就是位于django.shortcuts模块中名为render_to_response() 的函数，大多数情况下，你会使用render_to_response()而不是手动加载模板并创建Context和HttpResponse对象。render_to_response() 的第一个参数必须是要使用的模板名称。 如果要给定第二个参数，那么该参数必须是为该模板创建 Context 时所使用的字典。 如果不提供第二个参数， render_to_response() 使用一个空字典。123456from django.shortcuts import render_to_responseimport datetimedef current_datetime(request): now = datetime.datetime.now() return render_to_response('current_datetime.html', &#123;'current_date': now&#125;) include模板标签 该标签允许在（模板中）包含其它的模板的内容。 标签的参数是所要包含的模板名称，可以是一个变量，也可以是用单/双引号硬编码的字符串。 每当在多个模板中出现相同的代码时，就应该考虑是否要使用 {% include %} 来减少重复。 1234567891011121314# mypage.html&lt;html&gt;&lt;body&gt;&#123;% include &quot;includes/nav.html&quot; %&#125;&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;# includes/nav.html&lt;div id=&quot;nav&quot;&gt; You are in: &#123;&#123; current_section &#125;&#125;&lt;/div&gt; 模板继承模板继承就是先构造一个基础框架模板，而后在其子模板中对它所包含站点公用部分和定义块进行重载。12345678910111213141516#base.html&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot;&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;My helpful timestamp site&lt;/h1&gt; &#123;% block content %&#125;&#123;% endblock %&#125; &#123;% block footer %&#125; &lt;hr&gt; &lt;p&gt;Thanks for visiting my site.&lt;/p&gt; &#123;% endblock %&#125;&lt;/body&gt;&lt;/html&gt; 我们使用一个以前已经见过的模板标签： {% block %} 。 所有的 {% block %} 标签告诉模板引擎，子模板可以重载这些部分。每个{% block %}标签所要做的是告诉模板引擎，该模板下的这一块内容将有可能被子模板覆盖。 123456789#current_datetime.html &#123;% extends &quot;base.html&quot; %&#125;&#123;% block title %&#125;The current time&#123;% endblock %&#125;&#123;% block content %&#125;&lt;p&gt;It is now &#123;&#123; current_date &#125;&#125;.&lt;/p&gt;&#123;% endblock %&#125; 在加载 current_datetime.html 模板时，模板引擎发现了 {% extends %} 标签， 注意到该模板是一个子模板。模板引擎立即装载其父模板，即base.html 。 此时，模板引擎注意到 base.html 中的三个 {% block %} 标签，并用子模板的内容替换这些 block 。因此，引擎将会使用我们在 { block title %} 中定义的标题，对 {% block content %} 也是如此。 所以，网页标题一块将由 {% block title %}替换，同样地，网页的内容一块将由 {% block content %}替换。 如果在模板中使用 {% extends %} ，必须保证其为模板中的第一个模板标记。 否则，模板继承将不起作用。 一般来说，基础模板中的 {% block %} 标签越多越好。记住，子模板不必定义父模板中所有的代码块，因此你可以用合理的缺省值对一些代码块进行填充，然后只对子模板所需的代码块进行（重）定义。 俗话说，钩子越多越好。 如果发觉自己在多个模板之间拷贝代码，你应该考虑将该代码段放置到父模板的某个 {% block %} 中。 如果你需要访问父模板中的块的内容，使用 {{ block.super }}这个标签吧，这一个魔法变量将会表现出父模板中的内容。 如果只想在上级代码块基础上添加内容，而不是全部重载，该变量就显得非常有用了。 不可同一个模板中定义多个同名的 {% block %} 。存在这样的限制是因为block 标签的工作方式是双向的。也就是说，block 标签不仅挖了一个要填的坑，也定义了在父模板中这个坑所填充的内容。 如果模板中出现了两个相同名称的 {% block %} 标签，父模板将无从得知要使用哪个块的内容。 {% extends %} 对所传入模板名称使用的加载方法和 get_template() 相同。 也就是说，会将模板名称被添加到 TEMPLATE_DIRS 设置之后。 多数情况下，{% extends %} 的参数应该是字符串，但是如果直到运行时方能确定父模板名，这个参数也可以是个变量。 这使得你能够实现一些很酷的动态功能。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Django book学习笔记(一)——视图和url配置]]></title>
      <url>%2F2017%2F03%2F24%2Fdjango%2FDjango_book%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%92%8Curl%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[视图一个视图就是Python的一个函数，每个视图函数至少要有一个参数，通常被叫作request。 这是一个触发这个视图、包含当前Web请求信息的对象，是类django.http.HttpRequest的一个实例。它返回一个HttpResponse实例。为了使一个Python的函数成为一个Django可识别的视图，它必须满足这两个条件。(也有例外)例：1234from django.http import HttpResponse def hello(request): return HttpResponse("Hello World") URL配置1).URLconfURLconf就像是 Django 所支撑网站的目录。它的本质是 URL 模式以及要为该 URL 模式调用的视图函数之间的映射表。你就是以这种方式告诉 Django，对于这个 URL 调用这段代码，对于那个 URL 调用那段代码。12345678910111213141516171819from django.conf.urls import patterns, include, urlfrom mysite.views import hello # Uncomment the next two lines to enable the admin:# from django.contrib import admin# admin.autodiscover() urlpatterns = patterns('', # Examples: # url(r'^$', 'mysite.views.home', name='home'), # url(r'^mysite/', include('mysite.foo.urls')), # Uncomment the admin/doc line below to enable admin documentation: # url(r'^admin/doc/', include('django.contrib.admindocs.urls')), # Uncomment the next line to enable the admin: # url(r'^admin/', include(admin.site.urls)), (r'^hello/$',hello),) 2).URL配置和松耦合在Django的应用程序中，URL的定义和视图函数之间是松耦合的，换句话说，决定URL返回哪个视图函数和实现这个视图函数是在两个不同的地方。这使得 开发人员可以修改一块而不会影响另一块。3).动态URL我们使用圆括号把参数在URL模式里标识出来。在这个例子中，我们想要把这些数字作为参数，用圆括号把 \d{1,2} 包围起来：1(r'^time/plus/(\d&#123;1,2&#125;)/$', hours_ahead), 对应视图函数：1234567891011from django.http import Http404, HttpResponseimport datetime def hours_ahead(request, offset): try: offset = int(offset) except ValueError: raise Http404() dt = datetime.datetime.now() + datetime.timedelta(hours=offset) html = "&lt;html&gt;&lt;body&gt;In %s hour(s), it will be %s.&lt;/body&gt;&lt;/html&gt;" % (offset, dt) return HttpResponse(html) 解释：offset 是从匹配的URL里提取出来的。 例如：如果请求URL是/time/plus/3/，那么offset将会是3；如果请求URL是/time/plus/21/，那么offset将会是21。请注意：捕获值永远都是字符串（string）类型，而不会是整数（integer）类型，即使这个字符串全由数字构成（如：“21”）。4).URL中常用的正则表达式 Django处理请求过程1).进来的请求转入/hello/.2).Django通过在ROOT_URLCONF配置来决定根URLconf.3).Django在URLconf中的所有URL模式中，查找第一个匹配/hello/的条目。4).如果找到匹配，将调用相应的视图函数5).视图函数返回一个HttpResponse6.)Django转换HttpResponse为一个适合的HTTP response， 以Web page显示出来]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[新的开始]]></title>
      <url>%2F2017%2F03%2F21%2F%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B%2F</url>
      <content type="text"><![CDATA[无论你从什么时候开始，重要的是开始后就不要停止。无论你从什么时候结束，重要的是结束后就不要悔恨。]]></content>
    </entry>

    
  
  
</search>
